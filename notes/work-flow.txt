we use workflow to track the users and check if they are loged in or not. so if they are not loged in for afew days
we sent noteification to them telling them to check the website.
there is more we can do with workflow for example in our book app if a user borrowed a book and he didn't returned
back before the time we sent a massage to him 


1- install upstash workflow
    npm install @upstash/workflow --legacy-peer-deps

2- from upstash go to QStash and copy the QSTASH_URL, QSTASH_TOKEN and add them to .env.local, config files

3- on lib create new file called workflow.ts
import { Client as WorkflowClient } from "@upstash/workflow";
import { Client as QStashClient, resend } from "@upstash/qstash";
import config from "@/lib/config";

export const workflowClient = new WorkflowClient({
  baseUrl: config.env.upstash.qstashUrl,
  token: config.env.upstash.qstashToken,
});

const qstashClient = new QStashClient({
  token: config.env.upstash.qstashToken,
});

export const sendEmail = async ({
  email,
  subject,
  message,
}: {
  email: string;
  subject: string;
  message: string;
}) => {
  await qstashClient.publishJSON({
    api: {
      name: "email",
      provider: resend({ token: config.env.resendToken }),
    },
    body: {
      from: "Ali Hameed <contact@alihameeddev.xyz>", // HERE we added the email domain
      to: [email],
      subject,
      html: message,
    },
  });
};



4- create an api route for workflow on app/api/workflows/onboarding/route.ts
import { serve } from "@upstash/workflow/nextjs";
import { db } from "@/database/drizzle";
import { users } from "@/database/schema";
import { eq } from "drizzle-orm";
import { sendEmail } from "@/lib/workflow";

type UserState = "non-active" | "active";

type InitialData = {
  email: string;
  fullName: string;
};

const ONE_DAY_IN_MS = 24 * 60 * 60 * 1000;
const THREE_DAYS_IN_MS = 3 * ONE_DAY_IN_MS;
const THIRTY_DAYS_IN_MS = 30 * ONE_DAY_IN_MS;

const getUserState = async (email: string): Promise<UserState> => {
  const user = await db
    .select()
    .from(users)
    .where(eq(users.email, email))
    .limit(1);

  if (user.length === 0) return "non-active";

  const lastActivityDate = new Date(user[0].lastActivityDate!);
  const now = new Date();
  const timeDifference = now.getTime() - lastActivityDate.getTime();

  if (
    timeDifference > THREE_DAYS_IN_MS &&
    timeDifference <= THIRTY_DAYS_IN_MS
  ) {
    return "non-active";
  }

  return "active";
};

export const { POST } = serve<InitialData>(async (context) => {
  const { email, fullName } = context.requestPayload;

  // Welcome Email
  await context.run("new-signup", async () => {
    await sendEmail({
      email,
      subject: "Welcome to the platform",
      message: `Welcome ${fullName}!`,
    });
  });

  await context.sleep("wait-for-3-days", 60 * 60 * 24 * 3);

  while (true) {
    const state = await context.run("check-user-state", async () => {
      return await getUserState(email);
    });

    if (state === "non-active") {
      await context.run("send-email-non-active", async () => {
        await sendEmail({
          email,
          subject: "Are you still there?",
          message: `Hey ${fullName}, we miss you!`,
        });
      });
    } else if (state === "active") {
      await context.run("send-email-active", async () => {
        await sendEmail({
          email,
          subject: "Welcome back!",
          message: `Welcome back ${fullName}!`,
        });
      });
    }

    await context.sleep("wait-for-1-month", 60 * 60 * 24 * 30);
  }
});




5- deploy the app on vercel and copy the url and go to settings >> enviroment variables and the kay: NEXT_PUBLIC_PROD_API_ENDPOINT 
  and the paste the url as a value and save it and go to .env.local and add it there
  after that add it to config: prodApiEndpoint: process.env.NEXT_PUBLIC_PROD_API_ENDPOINT!, then redepley the app on vercel


6- In oredr to send the eamil to the user we use Resend.com

STEP_ONE: from resend go to api keys and create a new api key with name and full access permission and all domains and then add it 
          you will get the api kay copy it and add it to .env.local 

STEP_TWO: pay a domain from hostinger and verify it from the email. and then from on this domain from hostinger go to 
          domain overview and get a professional email for this domain,
          so click manage email and create a new email give it a name like contact and this will be automaticly fowlloed by the domain name
          copy this email and go to workflow.ts and use it for in the body >> from 
          body: {
            from: "Ali Hameed <contact@alihameeddev.xyz>",
            to: [email],
            subject,
            html: message,
          },


3:54:16          
STEP_THREE: ON Resend go to domains >> add domain use the domain you bought from 
            hostinger

STEP_FOUR: from resend copy the DNS records and paste them on the hostinger >> your domain >> DNS
          which they should have type, name, mail serve, priority and TTL
          copy each DNS record at a time and add it
          once you complete them click I have added the records, it will take time 

STEP_FIFE: update lastActivityDate once a day for the user to check the last time the visit the website: on the root/layout add
  after(async () => {
    if(!session?.user?.id) return

     // get the user and see if the last activity date is today
    const user = await db 
      .select()
      .from(users)
      .where(eq(users.id, session?.user?.id))
      .limit(1)
    if (user[0].lastActivityDate == new Date().toISOString().slice(0, 10))
      return;

    await db
      .update(users)
      .set({ lastActivityDate: new Date().toISOString().slice(0, 10)})
      .where(eq(users.id, session?.user?.id))
  })


STEP_SIX: from env.local copy the RESEND_TOKEN and go to vercel >> settings anvironment variables add it there
  

3:44
     