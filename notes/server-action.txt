1- on the types file create types for authCredentials data
interface AuthCredentials {
  fullName: string
  email: string;
  password: string;
  universityId: number;
  universityCard: string;
  
}


2- on the lib create a new folder called actions, inside it create a new file called auth.ts
"use server";

import { eq } from "drizzle-orm";
import { db } from "@/database/drizzle";
import { users } from "@/database/schema";
import { hash } from "bcryptjs";
import { signIn } from "@/auth";
import { headers } from "next/headers";
import ratelimit from "@/lib/ratelimit";
import { redirect } from "next/navigation";
import { workflowClient } from "@/lib/workflow"
import config from "@/lib/config";

export const signInWithCredentials = async (
  params: Pick<AuthCredentials, "email" | "password">,
) => {
  const { email, password } = params;

//   const ip = (await headers()).get("x-forwarded-for") || "127.0.0.1";
//   const { success } = await ratelimit.limit(ip);

//   if (!success) return redirect("/too-fast");

  try {
    const result = await signIn("credentials", {
      email,
      password,
      redirect: false,
    });

    if (result?.error) {
      return { success: false, error: result.error };
    }

    return { success: true };
  } catch (error) {
    console.log(error, "Signin error");
    return { success: false, error: "Signin error" };
  }
};

export const signUp = async (params: AuthCredentials) => {
  const { fullName, email, universityId, password, universityCard } = params;

//   const ip = (await headers()).get("x-forwarded-for") || "127.0.0.1";
//   const { success } = await ratelimit.limit(ip);

//   if (!success) return redirect("/too-fast");

  const existingUser = await db
    .select()
    .from(users)
    .where(eq(users.email, email))
    .limit(1);

  if (existingUser.length > 0) {
    return { success: false, error: "User already exists" };
  }

  const hashedPassword = await hash(password, 10);

  try {
    await db.insert(users).values({
      fullName,
      email,
      universityId,
      passowrd: hashedPassword,
      universityCard,
    });

    // await workflowClient.trigger({
    //   url: `${config.env.prodApiEndpoint}/api/workflows/onboarding`,
    //   body: {
    //     email,
    //     fullName,
    //   },
    // });

    await signInWithCredentials({ email, password });

    return { success: true };
  } catch (error) {
    console.log(error, "Signup error");
    return { success: false, error: "Signup error" };
  }
};

3- go to signIn and signUp pages and pass the functions to the onSumit

4- update the layout to have SessionProvider
export default async function RootLayout({ children }: { children: React.ReactNode }) {

  const session = await auth()
  return (
    <html lang="en">
      <head>
      </head>
      <SessionProvider session={session}>
        <body  className={`${ibmPlexSans.className} ${bebasNeue.variable} antialiased`}>
          {children}
          <Toaster />
        </body>   
      </SessionProvider>
    </html>
  );
}

5- uodate the layout that has the signIn and signUp pages to redirect the user to home page if he loged in
  const session = await auth()
  if (session) redirect("/")

6- update the layout on the root to redirect the user to signIn page if he is not signing in
  const session = await auth()
  if (!session) redirect("/sign-in")
